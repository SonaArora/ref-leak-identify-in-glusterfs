global count[600000]
global traces_ref[80000]
global traces_unref[80000]
global ptr
global round
global i
global j
global status

function dump(){
	
	delete count
	
	delete traces_ref
	
	delete traces_unref

	i = 0

	j = 0
}

function aggregate(){

	printf("Net ref counts for each ptr : \n")

	foreach(c in count)
	{
       	if(count[c] != 0)
	    {
	        status = 1
	    }
	
        printf("%x : %d\n", c, count[c])
	}

	if ( status == 0 )
	{	
	    printf("%d\n",status)

		printf("Therefore, No Leaks \n")

		return 1 
	}
	
	printf("\nRef Traces :\n")

	//printing output in sorted order of ptr

	foreach([index1-, index2] in traces_ref)
	{
		printf("\nptr : %x\n",index1)

		printf("%s\n", traces_ref[index1, index2])
    		
	}

    printf("\n------\n")

    printf("\nUnref traces\n")
	foreach([index1-, index2] in traces_unref)
	{
		printf("\nptr : %x\n",index1)

        printf("%s\n", traces_unref[index1, index2])

	}

	dump()

}

function cast_attribute(ptr:long){
    if( @1 == "dict_ref" || @2 == "dict_unref" )
        return @cast(ptr, "_dict", "/usr/local/lib/libglusterfs.so.0")->refcount
    else if( @1 == "__inode_ref" || @2 == "__inode_unref" )
        return @cast(ptr, "_inode", "/usr/local/lib/libglusterfs.so.0")->refcount
    else if( @1 == "__fd_ref" || @2 == "__fd_unref" )
         return @cast(ptr, "_fd", "/usr/local/lib/libglusterfs.so.0")->refcount
}

probe
process("/usr/local/sbin/gluster*").library("/usr/local/lib/libglusterfs.so.0").function(@1){

    if(@1=="dict_ref")
    {
        ptr = $this
    }
    else if(@1=="__inode_ref")
    {
        ptr = $inode
    }
    else if(@1=="__fd_ref")
    {
        ptr = $fd
    }

    //count traces the refcount from referencing function.

    count[ptr] = cast_attribute(ptr) + 1

    //traces_ref stores backtraces
    traces_ref[ptr, i] = sprint_ubacktrace()
    
    i++

}

probe
process("/usr/local/sbin/glusterfs").library("/usr/local/lib/libglusterfs.so.0").function(@2){
    
    if(@2 == "dict_unref")
    {
        ptr = $this
    }
    else if(@2== "__inode_unref")
    {
        ptr = $inode
    }
    else if(@2 == "__fd_unref")
    {
        ptr = $fd
    }

    count[ptr] = cast_attribute(ptr) - 1

    traces_unref[ptr, j] = sprint_ubacktrace()

    j++

    if(count[ptr] == 0){

        delete traces_ref[ptr,*]

        delete traces_unref[ptr,*]

        delete count[ptr]

    }

}

probe timer.s($3){

	printf("\nROUND : %d\n", round)

	aggregate()
    
	status = 0

	printf("\n-----------\n")

	round++
}
